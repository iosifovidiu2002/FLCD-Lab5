program statement_list statement simple_statement structure_statement assume_statement repeat_statement parse_statement expression bool_expression int_expression declaration final_assign_declaration var_assign_declaration assign type atom_type array_type array_access io_statement boolean
func main ( ) : zilch { } \n assume otherwise repeat parse and or < > <= >= == != + - / * % var final = int bool char [ ] read write identifier constant
program -> func main ( ) : zilch { statement_list }
statement_list -> statement | statement \n statement_list
statement -> simple_statement | structure_statement
simple_statement -> var_assign_declaration | final_assign_declaration | declaration | assign | io_statement
structure_statement -> parse_statement |assume_statement | repeat_statement
assume_statement -> assume ( bool_expression ) { statement_list } | assume ( bool_expression ) { statement_list } otherwise { statement_list } | assume ( bool_expression ) { statement_list } otherwise { assume_statement }
repeat_statement -> repeat ( bool_expression ) { statement_list }
parse_statement -> parse ( var_assign_declaration : bool_expression : int_expression ) { statement_list }
expression -> int_expression | bool_expression
bool_expression -> identifier | constant | bool_expression and bool_expression | bool_expression or bool_expression | int_expression < int_expression | int_expression > int_expression | int_expression <= int_expression | int_expression >= int_expression | int_expression == int_expression | int_expression != int_expression | bool_expression == bool_expression | bool_expression != bool_expression
int_expression -> identifier | constant | int_expression + int_expression | int_expression - int_expression | int_expression / int_expression | int_expression * int_expression | int_expression % int_expression
declaration -> var identifier : type
final_assign_declaration -> final identifier : type = expression
var_assign_declaration -> declaration = expression
assign -> identifier = expression
type -> atom_type | array_type
atom_type -> int | bool | char
array_type -> atom_type [ constant ] | atom_type [ identifier ]
io_statement -> read ( identifier ) | write ( identifier )